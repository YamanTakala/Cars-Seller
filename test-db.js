// ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงูุฌูุณุงุช
const mongoose = require('mongoose');
const session = require('express-session');
const MongoStore = require('connect-mongo');
require('dotenv').config();

async function testDatabaseConnection() {
    try {
        console.log('๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู MongoDB...');
        
        // ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('โ ูุฌุญ ุงูุงุชุตุงู ุจู MongoDB');
        
        // ุงุฎุชุจุงุฑ ุงูุนูููุงุช ุงูุฃุณุงุณูุฉ
        console.log('๐ ุงุฎุชุจุงุฑ ุงูุนูููุงุช ุงูุฃุณุงุณูุฉ...');
        
        // ุฅูุดุงุก schema ุงุฎุชุจุงุฑ
        const TestSchema = new mongoose.Schema({
            name: String,
            timestamp: { type: Date, default: Date.now }
        });
        
        const TestModel = mongoose.model('Test', TestSchema);
        
        // ุฅูุดุงุก document ุฌุฏูุฏ
        const testDoc = new TestModel({ name: 'ุงุฎุชุจุงุฑ ุงูุงุชุตุงู' });
        await testDoc.save();
        console.log('โ ุชู ุญูุธ document ุฌุฏูุฏ');
        
        // ูุฑุงุกุฉ ุงูุจูุงูุงุช
        const foundDoc = await TestModel.findById(testDoc._id);
        console.log('โ ุชู ูุฑุงุกุฉ ุงูุจูุงูุงุช:', foundDoc.name);
        
        // ุญุฐู document ุงูุงุฎุชุจุงุฑ
        await TestModel.findByIdAndDelete(testDoc._id);
        console.log('โ ุชู ุญุฐู document ุงูุงุฎุชุจุงุฑ');
        
        // ุงุฎุชุจุงุฑ Sessions Store
        console.log('๐ ุงุฎุชุจุงุฑ MongoDB Session Store...');
        
        const store = MongoStore.create({
            mongoUrl: process.env.MONGODB_URI,
            dbName: 'car-marketplace',
            collectionName: 'sessions'
        });
        
        console.log('โ ุชู ุฅูุดุงุก Session Store ุจูุฌุงุญ');
        
        // ุงุฎุชุจุงุฑ ูุชุงุจุฉ ุฌูุณุฉ
        const sessionData = {
            user: {
                _id: '507f1f77bcf86cd799439011',
                firstName: 'ุฃุญูุฏ',
                lastName: 'ูุญูุฏ',
                email: 'test@example.com'
            }
        };
        
        const sessionId = 'test-session-' + Date.now();
        
        await new Promise((resolve, reject) => {
            store.set(sessionId, sessionData, (err) => {
                if (err) reject(err);
                else resolve();
            });
        });
        
        console.log('โ ุชู ุญูุธ ุงูุฌูุณุฉ ูู MongoDB');
        
        // ุงุฎุชุจุงุฑ ูุฑุงุกุฉ ุฌูุณุฉ
        const retrievedSession = await new Promise((resolve, reject) => {
            store.get(sessionId, (err, session) => {
                if (err) reject(err);
                else resolve(session);
            });
        });
        
        console.log('โ ุชู ุงุณุชุฑุฌุงุน ุงูุฌูุณุฉ:', retrievedSession.user.firstName);
        
        // ุญุฐู ุงูุฌูุณุฉ ุงูุงุฎุชุจุงุฑูุฉ
        await new Promise((resolve, reject) => {
            store.destroy(sessionId, (err) => {
                if (err) reject(err);
                else resolve();
            });
        });
        
        console.log('โ ุชู ุญุฐู ุงูุฌูุณุฉ ุงูุงุฎุชุจุงุฑูุฉ');
        
        console.log('\n๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช! ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงูุฌูุณุงุช ุชุนูู ุจุดูู ุตุญูุญ.');
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ:', error.message);
        console.error('ุชูุงุตูู ุงูุฎุทุฃ:', error);
    } finally {
        await mongoose.disconnect();
        console.log('๐ ุชู ูุทุน ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
        process.exit(0);
    }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
testDatabaseConnection();
